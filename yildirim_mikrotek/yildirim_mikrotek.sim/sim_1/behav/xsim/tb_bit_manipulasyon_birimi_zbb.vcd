$date
   Fri Mar 29 18:11:09 2024
$end
$version
  2022.2
$end
$timescale
  1ps
$end
$scope module tb_bit_manipulasyon_birimi_zbb $end
$var reg 1 ! clk_i $end
$var reg 1 " rst_i $end
$var reg 1 # din_valid_i $end
$var reg 32 $ din_value1_i [31:0] $end
$var reg 32 % din_value2_i [31:0] $end
$var reg 32 & din_instruction_i [31:0] $end
$var wire 1 ' din_ready_o $end
$var wire 1 ( din_decoded_o $end
$var wire 1 ) dout_valid_o $end
$var wire 32 * dout_result_o [31:0] $end
$scope module uut $end
$var wire 1 + clk_i $end
$var wire 1 , rst_i $end
$var wire 1 - din_valid_i $end
$var wire 1 ' din_ready_o $end
$var wire 1 ( din_decoded_o $end
$var wire 32 . din_value1_i [31:0] $end
$var wire 32 / din_value2_i [31:0] $end
$var wire 32 0 din_instruction_i [31:0] $end
$var wire 1 ) dout_valid_o $end
$var wire 1 1 dout_ready_i $end
$var wire 32 * dout_result_o [31:0] $end
$var wire 1 2 instruction_bitcnt $end
$var wire 1 3 instruction_minmax $end
$var wire 1 4 instruction_shift $end
$var wire 1 5 instruction_opneg $end
$var wire 1 6 instruction_pack $end
$var integer 32 7 i [31:0] $end
$var reg 32 8 dout_bitcnt [31:0] $end
$var reg 32 9 dout_minmax [31:0] $end
$var reg 32 : dout_shift [31:0] $end
$var reg 32 ; dout_opneg [31:0] $end
$var reg 32 < dout_pack [31:0] $end
$var reg 32 = din_rev [31:0] $end
$var wire 1 > bitcnt_ctz $end
$var wire 1 ? bitcnt_pcnt $end
$var wire 32 @ bitcnt_data [31:0] $end
$var wire 32 A bitcnt_bits [31:0] $end
$var wire 1 B value1_msb $end
$var wire 1 C value2_msb $end
$var wire 1 D minmax_lt $end
$var wire 5 E shamt [4:0] $end
$var wire 1 F shift_left $end
$var wire 1 G shift_ones $end
$var wire 1 H shift_arithmetic $end
$var wire 1 I shift_rot $end
$var wire 1 J shift_none $end
$var wire 1 K shift_op_rev $end
$var wire 1 L shift_op_rev8 $end
$var wire 1 M shift_op_orc_b $end
$scope module decoder $end
$var wire 32 0 instruction [31:0] $end
$var reg 1 N instruction_bitcnt $end
$var reg 1 O instruction_minmax $end
$var reg 1 P instruction_shift $end
$var reg 1 Q instruction_opneg $end
$var reg 1 R instruction_pack $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
x#
bx $
bx %
bx &
0'
x(
0)
bx *
0+
1,
x-
bx .
bx /
bx 0
z1
x2
x3
x4
x5
x6
b100000 7
b0xxxxxx 8
b0 9
bx :
b0 ;
b0 <
bx =
x>
x?
bx @
bx A
xB
xC
xD
bx E
xF
xG
xH
xI
xJ
xK
xL
xM
xN
xO
xP
xQ
xR
$end
#5000
1!
1+
#10000
0!
0+
#15000
1!
1+
#20000
0!
0"
1#
b10100101101001011010010110100101 $
b1011010010110100101101001011010 %
b1000000000000000111000000110011 &
x'
1(
1)
b10100101101001011010010110100101 *
0+
0,
1-
b10100101101001011010010110100101 .
b1011010010110100101101001011010 /
b1000000000000000111000000110011 0
02
03
04
15
06
b100000 7
b0 8
b10100101101001011010010110100101 9
b11111111111111111111111111101001 :
b10100101101001011010010110100101 ;
b1011010010110101010010110100101 <
b10100101101001011010010110100101 =
0>
0?
b10100101101001011010010110100101 @
b0 A
0B
0C
0D
b11010 E
0F
0G
1H
0I
0J
0K
0L
0M
0N
0O
0P
1Q
0R
#25000
1!
1+
#30000
0!
0#
0)
0+
0-
#35000
1!
1+
#40000
0!
0+
#45000
1!
1+
#50000
0!
1#
b11111111111111110000000000000000 $
b1111000011110000111100001111 %
b1000000000000000110000000110011 &
1)
b11111111111111111111000011110000 *
0+
1-
b11111111111111110000000000000000 .
b1111000011110000111100001111 /
b1000000000000000110000000110011 0
15
b1111000011110000111100001111 9
b11111111111111111111111111111110 :
b11111111111111111111000011110000 ;
b1111000011110000000000000000 <
b1111111111111111 =
b1111111111111111 @
b0 A
0D
b1111 E
0K
0L
0M
0N
0O
0P
1Q
0R
#55000
1!
1+
#60000
0!
0#
0)
0+
0-
#65000
1!
1+
#70000
0!
0+
#75000
1!
1+
#80000
0!
1#
b11111111000000001111111100000000 $
b111111110000000011111111 %
b1000000000000000100000000110011 &
1)
b0 *
0+
1-
b11111111000000001111111100000000 .
b111111110000000011111111 /
b1000000000000000100000000110011 0
15
b11111111000000001111111100000000 9
b11111111111111111111111111111111 :
b0 ;
b111111111111111100000000 <
b111111110000000011111111 =
b111111110000000011111111 @
b0 A
1B
0C
1D
b11111 E
0N
0O
0P
1Q
0R
#85000
1!
1+
#90000
0!
0#
0)
0+
0-
#95000
1!
1+
#100000
0!
0+
#105000
1!
1+
#110000
0!
1#
b11110000000000001111 $
b100 %
b1000000110011 &
1)
b111100000000000011110000 *
0+
1-
b11110000000000001111 .
b100 /
b1000000110011 0
14
05
b100000 7
b1100 8
b11110000000000001111 9
b111100000000000011110000 :
b11110000000000001011 ;
b1000000000000001111 <
b11110000000000001111000000000000 =
b11110000000000001111000000000000 @
b111111111111 A
0B
0D
b100 E
1F
0G
0H
0I
0K
0L
0M
0N
0O
1P
0Q
0R
#115000
1!
1+
#120000
0!
0#
0)
0+
0-
#125000
1!
1+
#130000
0!
0+
#135000
1!
1+
#140000
0!
1#
b11110000000011111111000000001111 $
b100 %
b1000000000000000101000000110011 &
1)
b11111111000000001111111100000000 *
0+
1-
b11110000000011111111000000001111 .
b1000000000000000101000000110011 0
14
b100000 7
b0 8
b100 9
b11111111000000001111111100000000 :
b11110000000011111111000000001011 ;
b1001111000000001111 <
b11110000000011111111000000001111 =
b11110000000011111111000000001111 @
b0 A
1B
1D
0F
0G
1H
0I
0N
0O
1P
0Q
0R
#145000
1!
1+
#150000
0!
0#
0)
0+
0-
#155000
1!
1+
#160000
0!
0+
#165000
1!
1+
#170000
0!
1#
b10010001101000101011001111000 $
b10000111011001010100001100100001 %
b1000000000000000000000110011 &
0(
1)
b1000011001000010101011001111000 *
0+
1-
b10010001101000101011001111000 .
b10000111011001010100001100100001 /
b1000000000000000000000110011 0
04
b100000 7
b11 8
b10000111011001010100001100100001 9
b10010001101000101011001111000 :
b1101010101011101110101010100110 ;
b1000011001000010101011001111000 <
b11110011010100010110001001000 =
b11110011010100010110001001000 @
b111 A
0B
1C
0D
b1 E
0F
0G
0H
0I
1J
0K
0L
0M
0N
0O
0P
0Q
0R
#175000
1!
1+
#180000
0!
0#
0)
0+
0-
#185000
1!
1+
#190000
0!
0+
#195000
1!
1+
#200000
0!
0+
#205000
1!
1+
#210000
0!
0+
#215000
1!
1+
#220000
0!
0+
#225000
1!
1+
#230000
0!
0+
#235000
1!
1+
#240000
0!
0+
#245000
1!
1+
#250000
0!
0+
#255000
1!
1+
#260000
0!
0+
#265000
1!
1+
#270000
0!
0+
